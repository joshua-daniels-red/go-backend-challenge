name: CI/CD - ch-8

on:
  push:
    branches: ["main"]
    paths:
      - 'ch-8/**'
      - '.github/workflows/ci-ch8.yml'
  pull_request:
    branches: ["main"]
    paths:
      - 'ch-8/**'
      - '.github/workflows/ci-ch8.yml'

jobs:
  test-lint:
    name: Test, Lint, Format
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ch-8

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22'

      - name: Install golangci-lint
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | \
            sh -s -- -b $(go env GOPATH)/bin v1.54.2

      - name: Run go vet
        run: go vet ./...

      - name: Check gofmt
        run: |
          test -z "$(gofmt -l .)" || (echo "Code not formatted" && exit 1)

      - name: Run unit tests with race detector
        run: go test -race ./... -coverprofile=coverage.out

  docker:
    name: Build & Push Docker Images
    needs: test-lint
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ch-8

    strategy:
      matrix:
        service: [consumer, producer]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.CR_PAT }}

      - name: Build and Push ${{ matrix.service }} Image
        run: |
          IMAGE=ghcr.io/${{ github.repository }}/ch8-${{ matrix.service }}:latest
          DOCKERFILE=Dockerfile.${{ matrix.service }}
          docker build -f $DOCKERFILE -t $IMAGE .
          docker push $IMAGE

  verify:
    name: Integration Verification (Minikube)
    needs: docker
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ch-8

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Minikube
        uses: medyagh/setup-minikube@latest
        with:
          minikube-version: 'v1.36.0'

      - name: Enable Minikube Docker Env
        run: eval $(minikube -p minikube docker-env)

      - name: Build images inside Minikube
        run: |
          docker build -t producer-app:latest -f Dockerfile.producer .
          docker build -t consumer-app:latest -f Dockerfile.consumer .

      - name: Run setup.sh
        run: |
          chmod +x setup.sh
          ./setup.sh

      - name: Wait for services to be ready
        run: sleep 60

      - name: Port-forward consumer
        run: kubectl port-forward svc/consumer 30080:8080 &

      - name: Verify /metrics endpoint
        run: |
          sleep 5
          status=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:30080/metrics)
          if [ "$status" != "200" ]; then
            echo "/metrics endpoint failed with status $status" && exit 1
          fi

      - name: Verify /stats endpoint
        run: |
          response=$(curl -s -w "%{http_code}" http://localhost:30080/stats)
          code=${response: -3}
          body=${response::-3}
          if [ "$code" != "200" ]; then
            echo "/stats endpoint failed with status $code" && exit 1
          fi
          echo "$body" | jq . > /dev/null || (echo "Invalid JSON from /stats" && exit 1)

      - name: Tear down cluster
        if: always()
        run: |
          chmod +x teardown.sh
          ./teardown.sh
