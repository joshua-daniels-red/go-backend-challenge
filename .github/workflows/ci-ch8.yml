name: CI/CD - ch-8 (Kubernetes)

on:
  push:
    branches: ["main"]
    paths:
      - 'ch-8/**'
      - '.github/workflows/ci-ch8.yml'
  pull_request:
    branches: ["main"]
    paths:
      - 'ch-8/**'
      - '.github/workflows/ci-ch8.yml'

jobs:
  test-lint:
    name: Test, Lint, Format
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ch-8

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22'

      - name: Install golangci-lint
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | \
            sh -s -- -b $(go env GOPATH)/bin v1.54.2

      - name: Run go vet
        run: go vet ./...

      - name: Check gofmt
        run: |
          test -z "$(gofmt -l .)" || (echo "Code not formatted" && exit 1)

      - name: Run unit tests with race detector
        run: go test -race ./... -coverprofile=coverage.out

  verify:
    name: Integration Test in Kubernetes (Kind)
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ch-8

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Kind cluster
        uses: helm/kind-action@v1.5.0
        with:
          cluster_name: kind-ch8

      - name: Set up kubectl context
        run: |
          kubectl cluster-info

      - name: Build and load Docker images into Kind
        run: |
          kind load docker-image producer-app:latest --name kind-ch8 || docker build -t producer-app:latest -f Dockerfile.producer . && kind load docker-image producer-app:latest --name kind-ch8
          kind load docker-image consumer-app:latest --name kind-ch8 || docker build -t consumer-app:latest -f Dockerfile.consumer . && kind load docker-image consumer-app:latest --name kind-ch8

      - name: Run setup script
        run: |
          chmod +x setup.sh
          ./setup.sh

      - name: Wait for services to be ready
        run: |
          kubectl wait --for=condition=ready pod -l app=consumer --timeout=180s

      - name: Port forward consumer
        run: |
          nohup kubectl port-forward svc/consumer 8080:8080 &
          sleep 10

      - name: Verify /metrics endpoint
        run: |
          status=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/metrics)
          if [ "$status" != "200" ]; then
            echo "/metrics endpoint failed with status $status" && exit 1
          fi

      - name: Verify /stats endpoint
        run: |
          response=$(curl -s -w "%{http_code}" http://localhost:8080/stats)
          code=${response: -3}
          body=${response::-3}
          if [ "$code" != "200" ]; then
            echo "/stats endpoint failed with status $code" && exit 1
          fi
          echo "$body" | jq . > /dev/null || (echo "Invalid JSON from /stats" && exit 1)

      - name: Teardown cluster
        if: always()
        run: kind delete cluster --name kind-ch8
